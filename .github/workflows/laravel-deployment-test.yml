name: Laravel Deployment Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/laravel.sh'
      - 'scripts/nginx.sh'
      - 'scripts/php.sh'
      - 'scripts/ssl.sh'
      - '.github/workflows/laravel-deployment-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'scripts/laravel.sh'
      - 'scripts/nginx.sh'
      - 'scripts/php.sh'
      - 'scripts/ssl.sh'
  workflow_dispatch:

jobs:
  test-laravel-deployment:
    name: Test Laravel Stack on Ubuntu ${{ matrix.ubuntu-version }}
    runs-on: ubuntu-${{ matrix.ubuntu-version }}
    
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: ['22.04', '24.04']
        php-version: ['8.3', '8.2']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: System Information
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "System Information"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "OS: $(lsb_release -d | cut -f2)"
          echo "Kernel: $(uname -r)"
          echo "Hostname: $(hostname)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: Test All Scripts Syntax
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Scripts Syntax"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          for script in scripts/*.sh; do
            echo "Testing: $script"
            bash -n "$script"
            if [ $? -eq 0 ]; then
              echo "  ✓ Syntax valid"
            else
              echo "  ✗ Syntax error"
              exit 1
            fi
          done
          
          echo ""
          echo "✓ All scripts syntax valid"
      
      - name: Install Nginx
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Installing Nginx"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          sudo apt update
          sudo apt install -y nginx
          
          # Start Nginx
          sudo systemctl start nginx
          sudo systemctl enable nginx
          
          # Verify
          if systemctl is-active --quiet nginx; then
            echo "✓ Nginx is running"
          else
            echo "✗ Nginx is not running"
            exit 1
          fi
          
          # Check version
          nginx -v
          
          # Test config
          sudo nginx -t
      
      - name: Install PHP ${{ matrix.php-version }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Installing PHP ${{ matrix.php-version }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Add PPA
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt update
          
          # Install PHP with common extensions
          sudo apt install -y \
            php${{ matrix.php-version }}-cli \
            php${{ matrix.php-version }}-fpm \
            php${{ matrix.php-version }}-mysql \
            php${{ matrix.php-version }}-pgsql \
            php${{ matrix.php-version }}-sqlite3 \
            php${{ matrix.php-version }}-curl \
            php${{ matrix.php-version }}-gd \
            php${{ matrix.php-version }}-mbstring \
            php${{ matrix.php-version }}-xml \
            php${{ matrix.php-version }}-zip \
            php${{ matrix.php-version }}-bcmath \
            php${{ matrix.php-version }}-intl
          
          # Start PHP-FPM
          sudo systemctl start php${{ matrix.php-version }}-fpm
          sudo systemctl enable php${{ matrix.php-version }}-fpm
          
          # Verify
          if systemctl is-active --quiet php${{ matrix.php-version }}-fpm; then
            echo "✓ PHP-FPM is running"
          else
            echo "✗ PHP-FPM is not running"
            exit 1
          fi
          
          # Check version
          php${{ matrix.php-version }} -v
          
          # Check FPM socket
          if [ -S "/var/run/php/php${{ matrix.php-version }}-fpm.sock" ]; then
            echo "✓ PHP-FPM socket exists"
            ls -lh /var/run/php/php${{ matrix.php-version }}-fpm.sock
          else
            echo "✗ PHP-FPM socket not found"
            exit 1
          fi
      
      - name: Install Composer
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Installing Composer"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
          
          # Verify
          if command -v composer &> /dev/null; then
            echo "✓ Composer installed"
            composer --version
          else
            echo "✗ Composer not found"
            exit 1
          fi
      
      - name: Install MySQL
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Installing MySQL"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          sudo apt install -y mysql-server mysql-client
          
          # Start MySQL
          sudo systemctl start mysql
          sudo systemctl enable mysql
          
          # Verify
          if systemctl is-active --quiet mysql; then
            echo "✓ MySQL is running"
          else
            echo "✗ MySQL is not running"
            exit 1
          fi
          
          # Create test database
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS laravel_test;"
          sudo mysql -e "CREATE USER IF NOT EXISTS 'laravel'@'localhost' IDENTIFIED BY 'password123';"
          sudo mysql -e "GRANT ALL PRIVILEGES ON laravel_test.* TO 'laravel'@'localhost';"
          sudo mysql -e "FLUSH PRIVILEGES;"
          
          echo "✓ Test database created"
      
      - name: Test Laravel Script Functions
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Laravel Script Functions"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          source scripts/laravel.sh
          
          # Check functions
          functions=(
            "detect_php_version"
            "select_php_version"
            "setup_laravel_permissions"
            "create_nginx_laravel_config"
            "create_apache_laravel_config"
            "deploy_laravel_project"
            "manage_github_ssh"
          )
          
          for func in "${functions[@]}"; do
            if declare -f "$func" > /dev/null; then
              echo "  ✓ $func"
            else
              echo "  ✗ $func not found"
              exit 1
            fi
          done
          
          echo ""
          echo "✓ All Laravel functions loaded"
      
      - name: Test PHP Version Detection
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing PHP Version Detection"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          source scripts/laravel.sh
          
          # Test detect_php_version
          detected_version=$(detect_php_version)
          
          if [ -n "$detected_version" ]; then
            echo "✓ Detected PHP version: $detected_version"
            
            # Verify it matches installed version
            if [ "$detected_version" = "${{ matrix.php-version }}" ]; then
              echo "✓ Version matches installed PHP"
            else
              echo "⚠ Detected: $detected_version, Expected: ${{ matrix.php-version }}"
            fi
          else
            echo "✗ Failed to detect PHP version"
            exit 1
          fi
      
      - name: Create Mock Laravel Project
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Creating Mock Laravel Project"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Create project directory
          sudo mkdir -p /var/www/test-laravel
          sudo mkdir -p /var/www/test-laravel/public
          sudo mkdir -p /var/www/test-laravel/storage
          sudo mkdir -p /var/www/test-laravel/bootstrap/cache
          
          # Create mock index.php
          cat <<'EOF' | sudo tee /var/www/test-laravel/public/index.php > /dev/null
<?php
phpinfo();
?>
EOF

          # Create mock composer.json
          cat <<'EOF' | sudo tee /var/www/test-laravel/composer.json > /dev/null
{
    "name": "test/laravel-app",
    "type": "project",
    "require": {
        "php": "^8.2"
    }
}
EOF

          # Create .env.example
          cat <<'EOF' | sudo tee /var/www/test-laravel/.env.example > /dev/null
APP_NAME=TestLaravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel_test
DB_USERNAME=laravel
DB_PASSWORD=password123
EOF

          echo "✓ Mock Laravel project created"
      
      - name: Test Laravel Permissions Setup
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Laravel Permissions"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          source scripts/laravel.sh
          
          # Apply permissions
          setup_laravel_permissions "/var/www/test-laravel"
          
          # Verify ownership
          owner=$(stat -c '%U' /var/www/test-laravel)
          group=$(stat -c '%G' /var/www/test-laravel)
          
          echo "Owner: $owner"
          echo "Group: $group"
          
          if [ "$group" = "www-data" ]; then
            echo "✓ Group is www-data"
          else
            echo "⚠ Group is not www-data (CI environment)"
          fi
          
          # Check storage permissions
          storage_perms=$(stat -c '%a' /var/www/test-laravel/storage)
          echo "Storage permissions: $storage_perms"
          
          if [ "$storage_perms" = "775" ] || [ "$storage_perms" = "755" ]; then
            echo "✓ Storage permissions correct"
          else
            echo "⚠ Storage permissions: $storage_perms"
          fi
      
      - name: Test Nginx Laravel Configuration Generation
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Nginx Configuration Generation"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Create Nginx config manually (simulating the function)
          cat <<EOF | sudo tee /etc/nginx/sites-available/test-laravel.local > /dev/null
server {
    listen 80;
    server_name test-laravel.local;
    root /var/www/test-laravel/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php\$ {
        fastcgi_pass unix:/var/run/php/php${{ matrix.php-version }}-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_hide_header X-Powered-By;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF

          echo "✓ Nginx config created"
          
          # Enable site
          sudo ln -sf /etc/nginx/sites-available/test-laravel.local /etc/nginx/sites-enabled/test-laravel.local
          
          # Test Nginx config
          if sudo nginx -t 2>&1 | grep -q "successful"; then
            echo "✓ Nginx configuration valid"
          else
            echo "✗ Nginx configuration invalid"
            sudo nginx -t
            exit 1
          fi
          
          # Reload Nginx
          sudo systemctl reload nginx
          echo "✓ Nginx reloaded"
      
      - name: Test Laravel Application Response
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Laravel Application Response"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Add to /etc/hosts
          echo "127.0.0.1 test-laravel.local" | sudo tee -a /etc/hosts
          
          # Wait for services
          sleep 2
          
          # Test HTTP response
          response=$(curl -s -o /dev/null -w "%{http_code}" http://test-laravel.local)
          
          if [ "$response" = "200" ]; then
            echo "✓ HTTP 200 OK"
          else
            echo "⚠ HTTP $response (Expected 200)"
            echo "Checking Nginx error log..."
            sudo tail -20 /var/log/nginx/error.log || true
          fi
          
          # Test if PHP is executed
          content=$(curl -s http://test-laravel.local)
          if echo "$content" | grep -q "PHP Version"; then
            echo "✓ PHP is executing"
            echo "✓ Laravel-ready environment working"
          else
            echo "⚠ PHP might not be executing properly"
          fi
      
      - name: Test SSL Script Functions
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing SSL Script Functions"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          source scripts/ssl.sh
          
          # Check SSL functions
          ssl_functions=(
            "generate_ssl_certificate"
            "configure_nginx_ssl"
            "setup_local_ssl"
          )
          
          for func in "${ssl_functions[@]}"; do
            if declare -f "$func" > /dev/null; then
              echo "  ✓ $func"
            else
              echo "  ✗ $func not found"
              exit 1
            fi
          done
          
          echo ""
          echo "✓ All SSL functions loaded"
      
      - name: Test Self-Signed SSL Certificate Generation
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing SSL Certificate Generation"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Create SSL directory
          sudo mkdir -p /etc/nginx/ssl
          
          # Generate self-signed certificate
          sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/ssl/test-laravel.local.key \
            -out /etc/nginx/ssl/test-laravel.local.crt \
            -subj "/C=US/ST=Test/L=Test/O=Test/CN=test-laravel.local"
          
          # Verify certificate files
          if [ -f "/etc/nginx/ssl/test-laravel.local.crt" ] && [ -f "/etc/nginx/ssl/test-laravel.local.key" ]; then
            echo "✓ SSL certificate generated"
            
            # Check certificate details
            openssl x509 -in /etc/nginx/ssl/test-laravel.local.crt -text -noout | grep -E "Subject:|Issuer:|Not Before|Not After" | head -4
          else
            echo "✗ SSL certificate generation failed"
            exit 1
          fi
      
      - name: Test Nginx SSL Configuration
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing Nginx SSL Configuration"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Create SSL Nginx config
          cat <<EOF | sudo tee /etc/nginx/sites-available/test-laravel-ssl.local > /dev/null
server {
    listen 443 ssl http2;
    server_name test-laravel.local;
    root /var/www/test-laravel/public;

    ssl_certificate /etc/nginx/ssl/test-laravel.local.crt;
    ssl_certificate_key /etc/nginx/ssl/test-laravel.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        fastcgi_pass unix:/var/run/php/php${{ matrix.php-version }}-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOF

          # Enable SSL site
          sudo ln -sf /etc/nginx/sites-available/test-laravel-ssl.local /etc/nginx/sites-enabled/test-laravel-ssl.local
          
          # Test config
          if sudo nginx -t 2>&1 | grep -q "successful"; then
            echo "✓ SSL Nginx configuration valid"
          else
            echo "✗ SSL Nginx configuration invalid"
            sudo nginx -t
            exit 1
          fi
          
          # Reload Nginx
          sudo systemctl reload nginx
          echo "✓ Nginx with SSL reloaded"
      
      - name: Test HTTPS Response
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Testing HTTPS Response"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Test HTTPS (self-signed, so use -k)
          response=$(curl -k -s -o /dev/null -w "%{http_code}" https://test-laravel.local)
          
          if [ "$response" = "200" ]; then
            echo "✓ HTTPS 200 OK"
          else
            echo "⚠ HTTPS $response (Expected 200)"
          fi
          
          # Check SSL certificate
          echo ""
          echo "SSL Certificate Info:"
          echo | openssl s_client -connect localhost:443 -servername test-laravel.local 2>/dev/null | openssl x509 -noout -subject -issuer -dates
      
      - name: Verify Service Status
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Final Service Status"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          services=(
            "nginx"
            "php${{ matrix.php-version }}-fpm"
            "mysql"
          )
          
          for service in "${services[@]}"; do
            if systemctl is-active --quiet "$service"; then
              echo "  ✓ $service"
            else
              echo "  ✗ $service (not running)"
            fi
          done
      
      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Cleaning Up"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Remove test Laravel project
          sudo rm -rf /var/www/test-laravel
          
          # Remove Nginx configs
          sudo rm -f /etc/nginx/sites-enabled/test-laravel.local
          sudo rm -f /etc/nginx/sites-enabled/test-laravel-ssl.local
          sudo rm -f /etc/nginx/sites-available/test-laravel.local
          sudo rm -f /etc/nginx/sites-available/test-laravel-ssl.local
          
          # Remove SSL certificates
          sudo rm -f /etc/nginx/ssl/test-laravel.local.*
          
          # Remove MySQL test database
          sudo mysql -e "DROP DATABASE IF EXISTS laravel_test;" 2>/dev/null || true
          sudo mysql -e "DROP USER IF EXISTS 'laravel'@'localhost';" 2>/dev/null || true
          
          echo "✓ Cleanup completed"
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✓ All Laravel Deployment Tests Passed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Ubuntu: $(lsb_release -rs)"
          echo "PHP: ${{ matrix.php-version }}"
          echo ""
          echo "Verified Components:"
          echo "  ✓ Nginx web server"
          echo "  ✓ PHP-FPM ${{ matrix.php-version }}"
          echo "  ✓ MySQL database"
          echo "  ✓ Composer"
          echo "  ✓ Laravel permissions"
          echo "  ✓ Nginx Laravel configuration"
          echo "  ✓ HTTP response (200 OK)"
          echo "  ✓ Self-signed SSL certificate"
          echo "  ✓ Nginx SSL configuration"
          echo "  ✓ HTTPS response (200 OK)"
          echo "  ✓ All script functions loaded"
          echo ""
          echo "Laravel deployment stack is production-ready! 🚀"
          echo ""
